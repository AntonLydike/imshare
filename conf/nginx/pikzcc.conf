server {
    listen 80;
    listen [::]:80;

    server_name pikz.cc www.pikz.cc;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# server just for serving the txt files for zip file creation:
server {
    # listen on random port
    listen 8000;

    http2 on;

    # set root folder:
    root /var/www/pikz.cc/;

    # make use of the custom 404 page:
    error_page 404 /404.html;

    # maybe this helps too
    sendfile            on;
    sendfile_max_chunk  1m;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;

    # serve everything the same, but with zip header:
    location / {
        add_header X-Archive-Files 'zip';
    }
}

server {
    # change this to reflect the system:
    listen 443 default_server ssl;
    listen [::]:443 ssl;

    http2 on;

    server_name pikz.cc;

    ssl_certificate /etc/nginx/ssl/live/pikz.cc/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/pikz.cc/privkey.pem;
    
    # set root folder:
    root /var/www/pikz.cc/;

    # make use of the custom 404 page:
    error_page 404 /404.html;

    # gzip directives are not included as all non-image files sent are 
    # already small. Adding a compression/decompression steps seems unnecessary.
    # Some testing indicates that file sizes will stay at or below 2kib.
    # Gzipping jpegs yields no additional benefit as they are pretty much 
    # incompressible anyways.

    location / {

    }

    # Optimize how images are serverd:
    location /images {          
        sendfile            on;
        sendfile_max_chunk  1m;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        # Very aggressive caching, images are content-addressed, 
        # so they will never change.
        expires             max;
        add_header Cache-Control "public";
        add_header Cache-Control "immutable";
    }

    # Cache stylesheet and scripts less agressively,
    # they aren't big anyway.
    location /static {
        add_header Cache-Control "public";
    }

    # Location that serves the archives using mod_zip module.
    # Paths will be /download/$share.zip
    location /download {
        # rewrite url removing prefux and changing suffix:
        # converts /download/$share.zip -> /s/$share.txt
        rewrite ^/download/(.*).zip s/$1/files.txt  break;

        # hide X-Archive-Files header from client
        proxy_hide_header X-Archive-Files;

        # Accept any encodings from upstream
        proxy_set_header Accept-Encoding "";

        # don't pass headers sent to you
        proxy_pass_request_headers off;

        # pass to local endpoint for file list retrieval
        proxy_pass http://127.0.0.1:8000/$uri;
    }

}
